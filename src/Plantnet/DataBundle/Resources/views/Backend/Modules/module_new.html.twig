{% extends app.request.isXmlHttpRequest ? "PlantnetDataBundle:Backend:ajax_form_layout.html.twig" : "PlantnetDataBundle:Backend:form_layout.html.twig" %}
{% block stylesheets %}
    {{ parent() }}
{% endblock %}
{% block form %}
    <div id="title-form">
        <h4 class="text-info">
            <em>Collection: {{ collection.name }}</em> > New module
        </h4>
    </div>
    {% set updating = false %}
    {% for module in collection.modules %}
        {% if module.updating == true %}
            {% set updating = true %}
        {% else %}
            {% for child in module.children %}
                {% if child.updating == true %}
                    {% set updating = true %}
                {% endif %}
            {% endfor %}
        {% endif %}
    {% endfor %}
    {% if module.type == 'submodule' and updating == true %}
        <p class="text-warning">
            There is a work in progress, this process is disabled few minutes.
        </p>
    {% else %}
        {% if form.type.vars.value is defined and form.type.vars.value == 'text' %}
            <p>
                File reading starts at the second line, so first one must contain column heads.
                <br />
                Each line of the file must contain a unique identifier.
                <br />
                Columns must be in desired display order.
                <br />
                If you choose to enable the taxonomic browser, you will need to enter applying rules in the module's options after data importation.
            </p>
        {% else %}
            <p>
                File reading starts at the second line, so first one must contain column heads.
                <br />
                Each line of the file must contain a reference to a unique identifier specified in the main module.
                <br />
                If this reference does not exist, the corresponding line will be ignored.
                <br />
                Columns must be in desired display order.
            </p>
            <p>
                For <i>Locality</i> type, use WGS 84, decimal.
            </p>
        {% endif %}
        <p>
            URL field represents the value which is used in the URL to access this resource.
            <br />
            It is recomended to not update this value: it could break some external links to the resource.
        </p>
        <p>
            In decimal values, "." (dot) must be used instead of "," (comma).
        </p>
        <form id="add_module" action="{{ path('module_create', { 'id': collection.id, 'type': type }) }}" method="post" {{ form_enctype(form) }}>
            {{ form_errors(form) }}
            <div class="field-form" id="txt-container">
                {{ form_label(form.name) }}
                {{ form_errors(form.name) }}
                {{ form_widget(form.name) }}
            </div>
            <div class="field-form" id="url-container">
                {{ form_label(form.url) }}
                {{ form_errors(form.url) }}
                {{ form_widget(form.url) }}
            </div>
            {% if form.type.vars.value is defined and form.type.vars.value == 'text' %}
                <div class="field-form">
                    {{ form_label(form.taxonomy, 'Enable taxonomic browser', {'label_attr': {'class': 'inline'}}) }}
                    {{ form_errors(form.taxonomy) }}
                    {{ form_widget(form.taxonomy) }}
                </div>
                <div class="field-form">
                    {{ form_label(form.description) }}
                    {{ form_errors(form.description) }}
                    {{ form_widget(form.description, { 'attr': {'class': 'textarea'} }) }}
                </div>
            {% endif %}
            <div class="field-form">
                {{ form_label(form.wsonly, 'Web Service only', {'label_attr': {'class': 'inline'}}) }}
                {{ form_errors(form.wsonly) }}
                {{ form_widget(form.wsonly) }}
            </div>
            <div class="field-form">
                {% if form.type.vars.value is defined and form.type.vars.value!='text' %}
                    {{ form_label(form.type) }}
                {% endif %}
                {{ form_errors(form.type) }}
                {{ form_widget(form.type, { 'separator': '=====' }) }}
            </div>
            <div class="field-form">
                {{ form_label(form.file, 'CSV data') }}
                {{ form_errors(form.file) }}
                {{ form_widget(form.file) }}
            </div>
            {{ form_rest(form) }}
            <br />
            <button type="submit" class="btn">Import structure</button>
        </form>
    {% endif %}
{% endblock %}
{% block javascripts %}
    {{ parent() }}
    <script type="text/javascript">
        $(document).ready(function(){
            {% include "PlantnetDataBundle:Backend\\WYSIWYG:cleditor.html.twig" %}
            var isUpdated=false;
            $('#url-container input[type=text]').keyup(function(){
                isUpdated=true;
            });
            $('#txt-container input[type=text]').keyup(function(){
                if(!isUpdated){
                    var string=$(this).val();
                    //
                    string=string.replace(new RegExp("[àáâãäå]",'gi'),"a");
                    string=string.replace(new RegExp("æ",'gi'),"ae");
                    string=string.replace(new RegExp("ç",'gi'),"c");
                    string=string.replace(new RegExp("[èéêë]",'gi'),"e");
                    string=string.replace(new RegExp("[ìíîï]",'gi'),"i");
                    string=string.replace(new RegExp("ñ",'gi'),"n");                            
                    string=string.replace(new RegExp("[òóôõö]",'gi'),"o");
                    string=string.replace(new RegExp("œ",'gi'),"oe");
                    string=string.replace(new RegExp("[ùúûü]",'gi'),"u");
                    string=string.replace(new RegExp("[ýÿ]",'gi'),"y");
                    //
                    string=string.toLowerCase();
                    string=string.replace(/[^a-z0-9]/gi,'-');
                    string=string.replace(/--+/g,'-');
                    string=string.indexOf('-')==0?string.substring(1):string;
                    string=string.replace(/-$/,'');
                    //
                    $('#url-container input[type=text]').val(string);
                }
            });
        });
    </script>
{% endblock %}